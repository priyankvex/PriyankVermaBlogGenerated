<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pattern on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/pattern/</link>
    <description>Recent content in pattern on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Jul 2018 18:17:06 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>6 Lessons On Work Ethic I Learned In One Year Of Professional Career</title>
      <link>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</link>
      <pubDate>Sat, 21 Jul 2018 18:17:06 +0000</pubDate>
      
      <guid>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</guid>
      <description>Time flies. Recently I had completed one year as a full-time employee at my current employer **Squad. **A year has passed, and I decided it was time to revisit instances, memories, and experiences and to recollect what I had learned as a professional in this past year.
It was also a wake-up call to reassess and redirect the ship named professional career to make sure it doesn&amp;rsquo;t get stuck in a whirlpool.</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Clean Code Chapter 1&amp;2: Clean Code &amp; Meaningful names</title>
      <link>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</link>
      <pubDate>Sat, 05 Aug 2017 08:21:28 +0000</pubDate>
      
      <guid>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</guid>
      <description>I have started reading the book _Clean Code by Robert C. Martin, _which is considered to be a industry standard for writing maintainable and elegant code.
Because this book is such a heavy read, and each chapter is full of content and a knowledge bank in itself, for personal reference I&amp;rsquo;ve decided to summarise each chapter in a set of blog posts.
Chapter 1 : Clean Code This was more like chapter 0.</description>
    </item>
    
    <item>
      <title>5 notes on MVP architecture pattern for Android</title>
      <link>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</link>
      <pubDate>Mon, 19 Dec 2016 16:31:50 +0000</pubDate>
      
      <guid>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</guid>
      <description>Image credits Macoscope  MVP (Model View and Presenter) is an architectural pattern inspired by the popular MVC pattern.
MVP addresses two main points :
 1. Make views as dumb as possible. The dumber the better. 2. Make each layer loosely coupled and easily testable in isolation.  I am using MVP in one of my production project and have used in some dem0 apps. Here are my 5 notes on using MVP for android.</description>
    </item>
    
  </channel>
</rss>