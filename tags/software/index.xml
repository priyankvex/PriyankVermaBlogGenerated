<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/software/</link>
    <description>Recent content in software on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Mar 2019 15:54:40 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecting for Scale by Lee Atchison: Reading Experience</title>
      <link>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</link>
      <pubDate>Thu, 07 Mar 2019 15:54:40 +0000</pubDate>
      
      <guid>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</guid>
      <description>I recently read the book Architecting for Scale by Lee Atchison. The book contains a high-level overview of the major concepts that revolve around the topic of building highly-available and scalable apps.
I felt the book to be more suited as a light read for people already familiar with these concepts rather than being an informative book for the new readers.
The book divided into 5 parts mainly:
1. Availability</description>
    </item>
    
    <item>
      <title>Practical Design Patterns Part 1: The Command Pattern</title>
      <link>https://example.org/2018/09/17/practical-design-patterns-part-1-the-command-pattern/</link>
      <pubDate>Mon, 17 Sep 2018 07:51:56 +0000</pubDate>
      
      <guid>https://example.org/2018/09/17/practical-design-patterns-part-1-the-command-pattern/</guid>
      <description>** Introduction**
Most software these days support undoing/redoing actions. For example, text editors support undoing what we have written, file managers support undoing file creation/deletion etc. It&amp;rsquo;s a good UX practice to make software forgiving and allow users to undo their actions.
I always wondered how was this implemented? On a critical analysis, it seems as if the object on which the actions are taking place receives them from somewhere else, like a _command.</description>
    </item>
    
    <item>
      <title>A plea for lean software: 6 Lessons I learned to help keep software simple</title>
      <link>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</link>
      <pubDate>Sun, 02 Sep 2018 17:42:58 +0000</pubDate>
      
      <guid>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</guid>
      <description>Preface Recently, I was browsing the codebase of my company and saw that it has three versions of dashboards for an analytics page in it. I am pretty sure that customers don&amp;rsquo;t need that. This sparked something in my naive brain and I started exploring the internet for related ideas. That&amp;rsquo;s when I found this age-old paper, A Plea for Lean Software.
This post is largely influenced by ideas presented in the paper that resonated with me.</description>
    </item>
    
    <item>
      <title>6 Lessons On Work Ethic I Learned In One Year Of Professional Career</title>
      <link>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</link>
      <pubDate>Sat, 21 Jul 2018 18:17:06 +0000</pubDate>
      
      <guid>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</guid>
      <description>Time flies. Recently I had completed one year as a full-time employee at my current employer **Squad. **A year has passed, and I decided it was time to revisit instances, memories, and experiences and to recollect what I had learned as a professional in this past year.
It was also a wake-up call to reassess and redirect the ship named professional career to make sure it doesn&amp;rsquo;t get stuck in a whirlpool.</description>
    </item>
    
    <item>
      <title>Tracking Metrics to Surface and Solve Problems: Metric Tracking Practices I&#39;ve Learned So Far</title>
      <link>https://example.org/2018/05/21/tracking-metrics-to-surface-and-solve-problems-metric-tracking-practices-ive-learned-so-far/</link>
      <pubDate>Sun, 20 May 2018 20:11:59 +0000</pubDate>
      
      <guid>https://example.org/2018/05/21/tracking-metrics-to-surface-and-solve-problems-metric-tracking-practices-ive-learned-so-far/</guid>
      <description>It is a nice pleasant evening, you are sipping coffee and reviewing your code one final time, just so that you can gather enough confidence to hit the deploy button.
But a fact of life as a software engineer is that things can go wrong. Small changes may result in unexpected outcomes, including outages, errors or negatively impacting customers.
And when problems occur, either we can do random checks and validations that may or may not solve the problem or we can have a disciplined problem-solving approach that relies on data rather than intuitions.</description>
    </item>
    
    <item>
      <title>Organization Archetypes And The Concept Of Market-Oriented &#34;Solver Teams&#34;</title>
      <link>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</link>
      <pubDate>Sat, 05 May 2018 15:56:15 +0000</pubDate>
      
      <guid>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</guid>
      <description>Organizations which designs systems are constrained to produce designs which are copies of the communication structure of the organization.
In other words, how we organize our teams has a powerful effect on the software we produce, as well as our resulting architectural and production outcomes.
Thus, in order to get a fast flow of work from Development to Operations, with high quality, great customer outcomes and fast speed of delivery, we must organize our teams to bring the team structure to our advantage.</description>
    </item>
    
    <item>
      <title>Devops and The Principle Of Flow</title>
      <link>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</link>
      <pubDate>Sun, 29 Apr 2018 17:01:20 +0000</pubDate>
      
      <guid>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</guid>
      <description>In the technology value stream, work typically flows from Development to Operations, steps consisting of functional areas between our business and our customers.
As stated in the lean principles developed by Toyota, we should optimize to get a single-piece fast and smooth flow for our releases.
We increase flow by:
 1. Making work visible, 2. Reducing batch sizes and intervals of work 3. Building in the quality, preventing defects from being passed to downstream work centers.</description>
    </item>
    
    <item>
      <title>Fail Fast: Hone Your Ability to Recover and Respond Quickly</title>
      <link>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</link>
      <pubDate>Sat, 14 Apr 2018 18:16:23 +0000</pubDate>
      
      <guid>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</guid>
      <description>It&amp;rsquo;s close to midnight and you are about to wrap your day off. Suddenly you get a pager-duty to resolve a critical bug that&amp;rsquo;s failing some of the automated reporting emails.
You go on to check the logs in the log management tool. This is not the ideal time to find out that logs are not getting streamed to the log management service properly.
Next, you decide to check the performance metrics of the email API and you realize that you don&amp;rsquo;t know the new monitoring tool well enough to get the right metrics quickly.</description>
    </item>
    
    <item>
      <title>Strive to learn : 8 Ways to optimize for learning at work as a software engineer</title>
      <link>https://example.org/2018/04/07/strive-to-learn-8-ways-to-optimize-for-learning-at-work-as-software-engineer/</link>
      <pubDate>Sat, 07 Apr 2018 15:30:58 +0000</pubDate>
      
      <guid>https://example.org/2018/04/07/strive-to-learn-8-ways-to-optimize-for-learning-at-work-as-software-engineer/</guid>
      <description>A large open space with amazing ergonomic chairs where people discuss and execute upon disrupting ideas. It&amp;rsquo;s right next to company&amp;rsquo;s game room where you unwind after a hard work day. Here is we as engineers, get to work on products that our customers love and we love delivering that delight by continuous delivery (or something else :P).
Yet the most prominent thing that excites and should excite an effective engineer is the opportunity for learning at work.</description>
    </item>
    
    <item>
      <title>Practical Problem Solving Framework: Inspired By The Toyota Way</title>
      <link>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</link>
      <pubDate>Sun, 25 Mar 2018 11:32:12 +0000</pubDate>
      
      <guid>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</guid>
      <description>We all will agree to a certain point that having a system/process for anything reduces chances of errors.
As an engineer or someone people look forward to propose solutions to problems it&amp;rsquo;s beneficial to have a framework in place to solve problems effectively.
Recently I was reading _**The Toyota Way, **_and it suggested a framework to _Practical Problem Solving. _It almost felt trivial that this sort of framework would be invaluable to software engineers too (in fact for everyone).</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Estimation  Peril:  How To Estimate  Software Projects Effectively(or How Not To Lie)</title>
      <link>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</link>
      <pubDate>Sun, 15 Oct 2017 17:24:51 +0000</pubDate>
      
      <guid>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</guid>
      <description>Consider, you are a rockstar engineer and you are given a task by your favorite person, your project manager, to show some new fields in the dashboard.
As usual, you are asked to estimate it as soon as possible. You think that well, seems like a quickie and you are tempted to estimate it a day. But you, being burnt before, decided to look at the fields that are to be added carefully.</description>
    </item>
    
    <item>
      <title>Clean Code Chapter 1&amp;2: Clean Code &amp; Meaningful names</title>
      <link>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</link>
      <pubDate>Sat, 05 Aug 2017 08:21:28 +0000</pubDate>
      
      <guid>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</guid>
      <description>I have started reading the book _Clean Code by Robert C. Martin, _which is considered to be a industry standard for writing maintainable and elegant code.
Because this book is such a heavy read, and each chapter is full of content and a knowledge bank in itself, for personal reference I&amp;rsquo;ve decided to summarise each chapter in a set of blog posts.
Chapter 1 : Clean Code This was more like chapter 0.</description>
    </item>
    
  </channel>
</rss>