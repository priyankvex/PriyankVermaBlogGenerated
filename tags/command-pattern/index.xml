<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>command pattern on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/command-pattern/</link>
    <description>Recent content in command pattern on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Sep 2018 07:51:56 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/command-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Practical Design Patterns Part 1: The Command Pattern</title>
      <link>https://example.org/2018/09/17/practical-design-patterns-part-1-the-command-pattern/</link>
      <pubDate>Mon, 17 Sep 2018 07:51:56 +0000</pubDate>
      
      <guid>https://example.org/2018/09/17/practical-design-patterns-part-1-the-command-pattern/</guid>
      <description>** Introduction**
Most software these days support undoing/redoing actions. For example, text editors support undoing what we have written, file managers support undoing file creation/deletion etc. It&amp;rsquo;s a good UX practice to make software forgiving and allow users to undo their actions.
I always wondered how was this implemented? On a critical analysis, it seems as if the object on which the actions are taking place receives them from somewhere else, like a _command.</description>
    </item>
    
  </channel>
</rss>