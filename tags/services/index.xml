<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>services on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/services/</link>
    <description>Recent content in services on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Mar 2019 15:54:40 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/services/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecting for Scale by Lee Atchison: Reading Experience</title>
      <link>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</link>
      <pubDate>Thu, 07 Mar 2019 15:54:40 +0000</pubDate>
      
      <guid>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</guid>
      <description>I recently read the book Architecting for Scale by Lee Atchison. The book contains a high-level overview of the major concepts that revolve around the topic of building highly-available and scalable apps.
I felt the book to be more suited as a light read for people already familiar with these concepts rather than being an informative book for the new readers.
The book divided into 5 parts mainly:
1. Availability</description>
    </item>
    
    <item>
      <title>Organization Archetypes And The Concept Of Market-Oriented &#34;Solver Teams&#34;</title>
      <link>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</link>
      <pubDate>Sat, 05 May 2018 15:56:15 +0000</pubDate>
      
      <guid>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</guid>
      <description>Organizations which designs systems are constrained to produce designs which are copies of the communication structure of the organization.
In other words, how we organize our teams has a powerful effect on the software we produce, as well as our resulting architectural and production outcomes.
Thus, in order to get a fast flow of work from Development to Operations, with high quality, great customer outcomes and fast speed of delivery, we must organize our teams to bring the team structure to our advantage.</description>
    </item>
    
    <item>
      <title>Devops and The Principle Of Flow</title>
      <link>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</link>
      <pubDate>Sun, 29 Apr 2018 17:01:20 +0000</pubDate>
      
      <guid>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</guid>
      <description>In the technology value stream, work typically flows from Development to Operations, steps consisting of functional areas between our business and our customers.
As stated in the lean principles developed by Toyota, we should optimize to get a single-piece fast and smooth flow for our releases.
We increase flow by:
 1. Making work visible, 2. Reducing batch sizes and intervals of work 3. Building in the quality, preventing defects from being passed to downstream work centers.</description>
    </item>
    
    <item>
      <title>Fail Fast: Hone Your Ability to Recover and Respond Quickly</title>
      <link>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</link>
      <pubDate>Sat, 14 Apr 2018 18:16:23 +0000</pubDate>
      
      <guid>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</guid>
      <description>It&amp;rsquo;s close to midnight and you are about to wrap your day off. Suddenly you get a pager-duty to resolve a critical bug that&amp;rsquo;s failing some of the automated reporting emails.
You go on to check the logs in the log management tool. This is not the ideal time to find out that logs are not getting streamed to the log management service properly.
Next, you decide to check the performance metrics of the email API and you realize that you don&amp;rsquo;t know the new monitoring tool well enough to get the right metrics quickly.</description>
    </item>
    
    <item>
      <title>Introduction to Ingressing With Kubernetes</title>
      <link>https://example.org/2018/02/04/introduction-to-ingressing-with-kubernetes/</link>
      <pubDate>Sun, 04 Feb 2018 14:51:22 +0000</pubDate>
      
      <guid>https://example.org/2018/02/04/introduction-to-ingressing-with-kubernetes/</guid>
      <description>Single responsibility is a magical notion. Whatever it touches, it makes it more manageable and efficient.
With _Kubernetes, _we have the power to spawn many services. As many of them as we would like. But how inbounds requests are routed among these services?
_Ingressing _is a powerful way to decouple routing rules with core application logic.
According to kubernetes,
Ingress is a collection of rules that allow inbound connections to reach to reach cluster services.</description>
    </item>
    
  </channel>
</rss>