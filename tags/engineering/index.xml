<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>engineering on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/engineering/</link>
    <description>Recent content in engineering on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Mar 2019 15:54:40 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecting for Scale by Lee Atchison: Reading Experience</title>
      <link>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</link>
      <pubDate>Thu, 07 Mar 2019 15:54:40 +0000</pubDate>
      
      <guid>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</guid>
      <description>I recently read the book Architecting for Scale by Lee Atchison. The book contains a high-level overview of the major concepts that revolve around the topic of building highly-available and scalable apps.
I felt the book to be more suited as a light read for people already familiar with these concepts rather than being an informative book for the new readers.
The book divided into 5 parts mainly:
1. Availability</description>
    </item>
    
    <item>
      <title>Why systems fail and what can be done about it?</title>
      <link>https://example.org/2018/12/22/why-systems-fail-and-what-can-be-done-about-it/</link>
      <pubDate>Sat, 22 Dec 2018 15:49:35 +0000</pubDate>
      
      <guid>https://example.org/2018/12/22/why-systems-fail-and-what-can-be-done-about-it/</guid>
      <description>A recent team meeting at Squad touched the topic of &amp;ldquo;system robustness&amp;rdquo;. Clients and business operations want their systems to work, which is a very reasonable expectation. That&amp;rsquo;s what we engineers are paid for after all.
Everybody gave their input over what a robust system means to them. The responses made two points very clear:
1. There is an understanding gap in differentiating, robustness and availability of the system.</description>
    </item>
    
    <item>
      <title>6 Lessons On Work Ethic I Learned In One Year Of Professional Career</title>
      <link>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</link>
      <pubDate>Sat, 21 Jul 2018 18:17:06 +0000</pubDate>
      
      <guid>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</guid>
      <description>Time flies. Recently I had completed one year as a full-time employee at my current employer **Squad. **A year has passed, and I decided it was time to revisit instances, memories, and experiences and to recollect what I had learned as a professional in this past year.
It was also a wake-up call to reassess and redirect the ship named professional career to make sure it doesn&amp;rsquo;t get stuck in a whirlpool.</description>
    </item>
    
    <item>
      <title>Organization Archetypes And The Concept Of Market-Oriented &#34;Solver Teams&#34;</title>
      <link>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</link>
      <pubDate>Sat, 05 May 2018 15:56:15 +0000</pubDate>
      
      <guid>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</guid>
      <description>Organizations which designs systems are constrained to produce designs which are copies of the communication structure of the organization.
In other words, how we organize our teams has a powerful effect on the software we produce, as well as our resulting architectural and production outcomes.
Thus, in order to get a fast flow of work from Development to Operations, with high quality, great customer outcomes and fast speed of delivery, we must organize our teams to bring the team structure to our advantage.</description>
    </item>
    
    <item>
      <title>7 Tips On Making Your Engineering Workflow Faster</title>
      <link>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</link>
      <pubDate>Sun, 22 Apr 2018 19:55:28 +0000</pubDate>
      
      <guid>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</guid>
      <description>One of the most important thing that I like about pair programming with other awesome engineers is you get to see their workflows. How they get things done? How they get find and make their way around tools, terminal, and editors?
After witnessing and getting awestruck by many such experiences I realized that having an effective workflow can increase your day to productivity many folds.
The next step was to take action, and while doing so, I have compiled few tips to make your engineering flow faster too.</description>
    </item>
    
    <item>
      <title>Fail Fast: Hone Your Ability to Recover and Respond Quickly</title>
      <link>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</link>
      <pubDate>Sat, 14 Apr 2018 18:16:23 +0000</pubDate>
      
      <guid>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</guid>
      <description>It&amp;rsquo;s close to midnight and you are about to wrap your day off. Suddenly you get a pager-duty to resolve a critical bug that&amp;rsquo;s failing some of the automated reporting emails.
You go on to check the logs in the log management tool. This is not the ideal time to find out that logs are not getting streamed to the log management service properly.
Next, you decide to check the performance metrics of the email API and you realize that you don&amp;rsquo;t know the new monitoring tool well enough to get the right metrics quickly.</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Estimation  Peril:  How To Estimate  Software Projects Effectively(or How Not To Lie)</title>
      <link>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</link>
      <pubDate>Sun, 15 Oct 2017 17:24:51 +0000</pubDate>
      
      <guid>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</guid>
      <description>Consider, you are a rockstar engineer and you are given a task by your favorite person, your project manager, to show some new fields in the dashboard.
As usual, you are asked to estimate it as soon as possible. You think that well, seems like a quickie and you are tempted to estimate it a day. But you, being burnt before, decided to look at the fields that are to be added carefully.</description>
    </item>
    
    <item>
      <title>Clean Code Chapter 1&amp;2: Clean Code &amp; Meaningful names</title>
      <link>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</link>
      <pubDate>Sat, 05 Aug 2017 08:21:28 +0000</pubDate>
      
      <guid>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</guid>
      <description>I have started reading the book _Clean Code by Robert C. Martin, _which is considered to be a industry standard for writing maintainable and elegant code.
Because this book is such a heavy read, and each chapter is full of content and a knowledge bank in itself, for personal reference I&amp;rsquo;ve decided to summarise each chapter in a set of blog posts.
Chapter 1 : Clean Code This was more like chapter 0.</description>
    </item>
    
  </channel>
</rss>