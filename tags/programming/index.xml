<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/programming/</link>
    <description>Recent content in programming on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Sep 2018 17:42:58 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A plea for lean software: 6 Lessons I learned to help keep software simple</title>
      <link>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</link>
      <pubDate>Sun, 02 Sep 2018 17:42:58 +0000</pubDate>
      
      <guid>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</guid>
      <description>Preface Recently, I was browsing the codebase of my company and saw that it has three versions of dashboards for an analytics page in it. I am pretty sure that customers don&amp;rsquo;t need that. This sparked something in my naive brain and I started exploring the internet for related ideas. That&amp;rsquo;s when I found this age-old paper, A Plea for Lean Software.
This post is largely influenced by ideas presented in the paper that resonated with me.</description>
    </item>
    
    <item>
      <title>6 Lessons On Work Ethic I Learned In One Year Of Professional Career</title>
      <link>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</link>
      <pubDate>Sat, 21 Jul 2018 18:17:06 +0000</pubDate>
      
      <guid>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</guid>
      <description>Time flies. Recently I had completed one year as a full-time employee at my current employer **Squad. **A year has passed, and I decided it was time to revisit instances, memories, and experiences and to recollect what I had learned as a professional in this past year.
It was also a wake-up call to reassess and redirect the ship named professional career to make sure it doesn&amp;rsquo;t get stuck in a whirlpool.</description>
    </item>
    
    <item>
      <title>7 Tips On Making Your Engineering Workflow Faster</title>
      <link>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</link>
      <pubDate>Sun, 22 Apr 2018 19:55:28 +0000</pubDate>
      
      <guid>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</guid>
      <description>One of the most important thing that I like about pair programming with other awesome engineers is you get to see their workflows. How they get things done? How they get find and make their way around tools, terminal, and editors?
After witnessing and getting awestruck by many such experiences I realized that having an effective workflow can increase your day to productivity many folds.
The next step was to take action, and while doing so, I have compiled few tips to make your engineering flow faster too.</description>
    </item>
    
    <item>
      <title>Practical Problem Solving Framework: Inspired By The Toyota Way</title>
      <link>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</link>
      <pubDate>Sun, 25 Mar 2018 11:32:12 +0000</pubDate>
      
      <guid>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</guid>
      <description>We all will agree to a certain point that having a system/process for anything reduces chances of errors.
As an engineer or someone people look forward to propose solutions to problems it&amp;rsquo;s beneficial to have a framework in place to solve problems effectively.
Recently I was reading _**The Toyota Way, **_and it suggested a framework to _Practical Problem Solving. _It almost felt trivial that this sort of framework would be invaluable to software engineers too (in fact for everyone).</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Estimation  Peril:  How To Estimate  Software Projects Effectively(or How Not To Lie)</title>
      <link>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</link>
      <pubDate>Sun, 15 Oct 2017 17:24:51 +0000</pubDate>
      
      <guid>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</guid>
      <description>Consider, you are a rockstar engineer and you are given a task by your favorite person, your project manager, to show some new fields in the dashboard.
As usual, you are asked to estimate it as soon as possible. You think that well, seems like a quickie and you are tempted to estimate it a day. But you, being burnt before, decided to look at the fields that are to be added carefully.</description>
    </item>
    
    <item>
      <title>Clean Code Chapter 1&amp;2: Clean Code &amp; Meaningful names</title>
      <link>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</link>
      <pubDate>Sat, 05 Aug 2017 08:21:28 +0000</pubDate>
      
      <guid>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</guid>
      <description>I have started reading the book _Clean Code by Robert C. Martin, _which is considered to be a industry standard for writing maintainable and elegant code.
Because this book is such a heavy read, and each chapter is full of content and a knowledge bank in itself, for personal reference I&amp;rsquo;ve decided to summarise each chapter in a set of blog posts.
Chapter 1 : Clean Code This was more like chapter 0.</description>
    </item>
    
    <item>
      <title>Philosophy Behind The Offensive Programming</title>
      <link>https://example.org/2017/07/08/philosophy-behind-the-offensive-programming/</link>
      <pubDate>Fri, 07 Jul 2017 19:30:08 +0000</pubDate>
      
      <guid>https://example.org/2017/07/08/philosophy-behind-the-offensive-programming/</guid>
      <description>Recently I was listening to a podcast and there was this really smart guy Piwai talking about something that instantly captivated by attention. That was the coining of the term Offensive Programming.
What is offensive programming?
Well, you can find the literature on Wikipedia and also I am not the best person to explain that. So check that out please. But fundamentally, _offensive programming _refers to a style of programming that is exact opposite of the more famous counter-part the defensive programming.</description>
    </item>
    
    <item>
      <title>5 notes on MVP architecture pattern for Android</title>
      <link>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</link>
      <pubDate>Mon, 19 Dec 2016 16:31:50 +0000</pubDate>
      
      <guid>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</guid>
      <description>Image credits Macoscope  MVP (Model View and Presenter) is an architectural pattern inspired by the popular MVC pattern.
MVP addresses two main points :
 1. Make views as dumb as possible. The dumber the better. 2. Make each layer loosely coupled and easily testable in isolation.  I am using MVP in one of my production project and have used in some dem0 apps. Here are my 5 notes on using MVP for android.</description>
    </item>
    
    <item>
      <title>Business in Boxers : 1 Month Into Running a StartUp</title>
      <link>https://example.org/2016/03/22/business-in-boxers-1-month-into-running-a-startup/</link>
      <pubDate>Tue, 22 Mar 2016 20:49:58 +0000</pubDate>
      
      <guid>https://example.org/2016/03/22/business-in-boxers-1-month-into-running-a-startup/</guid>
      <description>**Why the Series? **
(Inspired by book : Business In Blue Jeans)
Hi! This is Priyank. This series is about me pen downing my start-up ride. Don&amp;rsquo;t know if it&amp;rsquo;s fast or slow, all I really know is I&amp;rsquo;m gonna enjoy the ride.
Why the name?
Boxers is what you&amp;rsquo;ll find me almost every time in and business is what&amp;rsquo;s always in my mind and thus the name &amp;ldquo;Business In Boxers&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Practice Shapes : Android App To Learn Shapes</title>
      <link>https://example.org/2015/12/28/practice-shapes-android-app-to-learn-shapes/</link>
      <pubDate>Mon, 28 Dec 2015 14:56:00 +0000</pubDate>
      
      <guid>https://example.org/2015/12/28/practice-shapes-android-app-to-learn-shapes/</guid>
      <description>Only way to learn something is to learn it by yourself. Recently I have been playing with Canvas in android and it has been fun! :D
As they say knowledge is knowing tomato is a fruit. Wisdom is not putting it in vegetable basket. And best way to persist new gained &amp;ldquo;wisdom&amp;rdquo; is to put it in use.
Practice Shapes is a fun app both for kids and grown-up kids (Yes.</description>
    </item>
    
    <item>
      <title>Rails Number Helper Port to Android</title>
      <link>https://example.org/2015/10/06/rails-number-helper-port-to-android/</link>
      <pubDate>Tue, 06 Oct 2015 14:06:02 +0000</pubDate>
      
      <guid>https://example.org/2015/10/06/rails-number-helper-port-to-android/</guid>
      <description>A polyglot developer will understand, there is always something you like about one language and you wish was available for another language too.
So, recently I started learning rails and found _number_helper _API very cool and fun to use. It gives you easy API to convert numbers into many formats like _number_to_human _which will convert 20000 to _20 Thousands _or number_to_human_size that will convert 1024 to 1 KB.
That was it I wanted this stuff for Android too.</description>
    </item>
    
    <item>
      <title>Paint App in Android</title>
      <link>https://example.org/2015/09/06/paint-app-in-android/</link>
      <pubDate>Sun, 06 Sep 2015 10:14:04 +0000</pubDate>
      
      <guid>https://example.org/2015/09/06/paint-app-in-android/</guid>
      <description>Recently I was learning about Canvas and Custom views in Android and to put the theory in practice I made a pretty simple **Paint App. **
Source code of the app can be found https://github.com/priyankvex/Paint-App-Android.
[caption id=&amp;ldquo;attachment_159&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;480&amp;rdquo;] Screenshot of the app[/caption]
The App is pretty simple with features 1. Create Drawings (Obvious one :P). 2. Select different brush sizes. 3. Eraser with different sizes. 4. Color pallet. 5. Save drawings in Gallery.</description>
    </item>
    
    <item>
      <title>Making an OCR app for Android using Tesseract.</title>
      <link>https://example.org/2015/09/02/making-an-ocr-app-for-android-using-tesseract/</link>
      <pubDate>Wed, 02 Sep 2015 11:01:58 +0000</pubDate>
      
      <guid>https://example.org/2015/09/02/making-an-ocr-app-for-android-using-tesseract/</guid>
      <description>Star on GitHub
Recently I was playing with OCR library by google called as &amp;ldquo;Tesseract&amp;rdquo; (cool name for a library!).
[caption id=&amp;ldquo;attachment_153&amp;rdquo; align=&amp;ldquo;alignleft&amp;rdquo; width=&amp;ldquo;234&amp;rdquo;] App in action.[/caption]
It was a fun experience. This post shows how you can make a simple OCR app in Android using Tesseract.
We will be using Tess-Two a fork of Tesseract with some additional tools like Liptonica which is an image processing library.
If you want an even easier way to get started with OCR on Android you can try this library built by me.</description>
    </item>
    
    <item>
      <title>How to build Tesseract OCR library for Android Studio?</title>
      <link>https://example.org/2015/08/30/how-to-build-tesseract-ocr-library-for-android-studio/</link>
      <pubDate>Sun, 30 Aug 2015 10:07:28 +0000</pubDate>
      
      <guid>https://example.org/2015/08/30/how-to-build-tesseract-ocr-library-for-android-studio/</guid>
      <description>Star On GitHub
If you ever tried to create an OCR app for Android you must have stumbled upon the OCR library by Google Tesseract. And then the problems began.
To use the library in your project you first need to build it. But building the library to be compatible with gradle, which is the new build system for Android projects is little not so easily stated anywhere in the library manual.</description>
    </item>
    
    <item>
      <title>The Passionate Programmer : Reading Experience</title>
      <link>https://example.org/2015/07/22/the-passionate-programmer-reading-experience/</link>
      <pubDate>Wed, 22 Jul 2015 17:36:30 +0000</pubDate>
      
      <guid>https://example.org/2015/07/22/the-passionate-programmer-reading-experience/</guid>
      <description>Here we go for the 3rd time. My 3rd book for 2015&amp;rsquo;s 10 book reading challenge is _The Passionate Programmer. _
I picked this book from pragmatic programmer book shelf. All books listed there are awesome and are a must read. Anyways continuing with this book, it was an awesome reading experience. It was one of those books you wish to never end.
The author covers many aspects of what constitutes a not good but a great software developing career.</description>
    </item>
    
    <item>
      <title>Starting c/c&#43;&#43; programming in Linux.</title>
      <link>https://example.org/2014/03/11/starting-cc-programming-in-linux/</link>
      <pubDate>Tue, 11 Mar 2014 19:04:44 +0000</pubDate>
      
      <guid>https://example.org/2014/03/11/starting-cc-programming-in-linux/</guid>
      <description>So, guys this post is just a kick off to my blog.
This post is about coding in c or c++ in Linux . So, if you are a beginner looking to get your hand on coding in c or c++ in Linux, this will be of great help.
STEPS:
1.You can use gedit or i recommend you download Sublime Text for Linux.
 Select your language as c/c++ and code and save the file.</description>
    </item>
    
  </channel>
</rss>