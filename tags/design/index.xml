<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/design/</link>
    <description>Recent content in design on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2019 10:40:27 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to LSM Trees: May the logs be with you</title>
      <link>https://example.org/2019/04/28/introduction-to-lsm-trees-may-the-logs-be-with-you/</link>
      <pubDate>Sun, 28 Apr 2019 10:40:27 +0000</pubDate>
      
      <guid>https://example.org/2019/04/28/introduction-to-lsm-trees-may-the-logs-be-with-you/</guid>
      <description>LSM Trees overview
  This post is a part of a newsletter that I run: “Scamming The Coding Interview“, which is geared towards helping people ACE their coding interviews. We send a coding question on weekdays along with a system design article like this one on weekends. Do subscribe If you find this article valuable.
Introduction What will be the simplest implementation of a database that we can think of?</description>
    </item>
    
    <item>
      <title>Architecting for Scale by Lee Atchison: Reading Experience</title>
      <link>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</link>
      <pubDate>Thu, 07 Mar 2019 15:54:40 +0000</pubDate>
      
      <guid>https://example.org/2019/03/07/architecting-for-scale-by-lee-atchison-reading-experience/</guid>
      <description>I recently read the book Architecting for Scale by Lee Atchison. The book contains a high-level overview of the major concepts that revolve around the topic of building highly-available and scalable apps.
I felt the book to be more suited as a light read for people already familiar with these concepts rather than being an informative book for the new readers.
The book divided into 5 parts mainly:
1. Availability</description>
    </item>
    
    <item>
      <title>How To Objectively Reason About Systems: Correctness Properties Of A System</title>
      <link>https://example.org/2019/01/06/how-to-objectively-reason-about-systems-correctness-properties-of-a-system/</link>
      <pubDate>Sun, 06 Jan 2019 15:54:40 +0000</pubDate>
      
      <guid>https://example.org/2019/01/06/how-to-objectively-reason-about-systems-correctness-properties-of-a-system/</guid>
      <description>This post is a part of a newsletter that I run: &amp;ldquo;Scamming The Coding Interview&amp;rdquo;, which is geared towards helping people ACE their coding interviews. We send a coding question on weekdays along with a system design article like this one on weekends. Do subscribe If you find this article valuable.
When a new system is to be designed, the first and the most important step is to generally get the expectations from the system to be crystal clear.</description>
    </item>
    
    <item>
      <title>Basics of Database Partitioning and Partition Strategies</title>
      <link>https://example.org/2018/12/30/basics-of-database-partitioning-and-partition-strategies/</link>
      <pubDate>Sun, 30 Dec 2018 16:50:55 +0000</pubDate>
      
      <guid>https://example.org/2018/12/30/basics-of-database-partitioning-and-partition-strategies/</guid>
      <description>You are a part of a startup which has recently scaled to reach a huge number of users. This means that the increased number of users are going to generate a huge amount of data that you have to store and manage.
It soon becomes evident that managing a huge dataset is a major hurdle to achieve query efficiency and it might make sense to break the database down into smaller and much more manageable chunks, just like good old low scale days.</description>
    </item>
    
    <item>
      <title>A plea for lean software: 6 Lessons I learned to help keep software simple</title>
      <link>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</link>
      <pubDate>Sun, 02 Sep 2018 17:42:58 +0000</pubDate>
      
      <guid>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</guid>
      <description>Preface Recently, I was browsing the codebase of my company and saw that it has three versions of dashboards for an analytics page in it. I am pretty sure that customers don&amp;rsquo;t need that. This sparked something in my naive brain and I started exploring the internet for related ideas. That&amp;rsquo;s when I found this age-old paper, A Plea for Lean Software.
This post is largely influenced by ideas presented in the paper that resonated with me.</description>
    </item>
    
    <item>
      <title>Tracking Metrics to Surface and Solve Problems: Metric Tracking Practices I&#39;ve Learned So Far</title>
      <link>https://example.org/2018/05/21/tracking-metrics-to-surface-and-solve-problems-metric-tracking-practices-ive-learned-so-far/</link>
      <pubDate>Sun, 20 May 2018 20:11:59 +0000</pubDate>
      
      <guid>https://example.org/2018/05/21/tracking-metrics-to-surface-and-solve-problems-metric-tracking-practices-ive-learned-so-far/</guid>
      <description>It is a nice pleasant evening, you are sipping coffee and reviewing your code one final time, just so that you can gather enough confidence to hit the deploy button.
But a fact of life as a software engineer is that things can go wrong. Small changes may result in unexpected outcomes, including outages, errors or negatively impacting customers.
And when problems occur, either we can do random checks and validations that may or may not solve the problem or we can have a disciplined problem-solving approach that relies on data rather than intuitions.</description>
    </item>
    
    <item>
      <title>Organization Archetypes And The Concept Of Market-Oriented &#34;Solver Teams&#34;</title>
      <link>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</link>
      <pubDate>Sat, 05 May 2018 15:56:15 +0000</pubDate>
      
      <guid>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</guid>
      <description>Organizations which designs systems are constrained to produce designs which are copies of the communication structure of the organization.
In other words, how we organize our teams has a powerful effect on the software we produce, as well as our resulting architectural and production outcomes.
Thus, in order to get a fast flow of work from Development to Operations, with high quality, great customer outcomes and fast speed of delivery, we must organize our teams to bring the team structure to our advantage.</description>
    </item>
    
    <item>
      <title>Practical Problem Solving Framework: Inspired By The Toyota Way</title>
      <link>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</link>
      <pubDate>Sun, 25 Mar 2018 11:32:12 +0000</pubDate>
      
      <guid>https://example.org/2018/03/25/practical-problem-solving-framework-inspired-by-the-toyota-way/</guid>
      <description>We all will agree to a certain point that having a system/process for anything reduces chances of errors.
As an engineer or someone people look forward to propose solutions to problems it&amp;rsquo;s beneficial to have a framework in place to solve problems effectively.
Recently I was reading _**The Toyota Way, **_and it suggested a framework to _Practical Problem Solving. _It almost felt trivial that this sort of framework would be invaluable to software engineers too (in fact for everyone).</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Estimation  Peril:  How To Estimate  Software Projects Effectively(or How Not To Lie)</title>
      <link>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</link>
      <pubDate>Sun, 15 Oct 2017 17:24:51 +0000</pubDate>
      
      <guid>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</guid>
      <description>Consider, you are a rockstar engineer and you are given a task by your favorite person, your project manager, to show some new fields in the dashboard.
As usual, you are asked to estimate it as soon as possible. You think that well, seems like a quickie and you are tempted to estimate it a day. But you, being burnt before, decided to look at the fields that are to be added carefully.</description>
    </item>
    
    <item>
      <title>Clean Code Chapter 1&amp;2: Clean Code &amp; Meaningful names</title>
      <link>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</link>
      <pubDate>Sat, 05 Aug 2017 08:21:28 +0000</pubDate>
      
      <guid>https://example.org/2017/08/05/clean-code-chapter-12-clean-code-meaningful-names/</guid>
      <description>I have started reading the book _Clean Code by Robert C. Martin, _which is considered to be a industry standard for writing maintainable and elegant code.
Because this book is such a heavy read, and each chapter is full of content and a knowledge bank in itself, for personal reference I&amp;rsquo;ve decided to summarise each chapter in a set of blog posts.
Chapter 1 : Clean Code This was more like chapter 0.</description>
    </item>
    
  </channel>
</rss>