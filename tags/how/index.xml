<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>how on Steam - a minimal theme for Hugo</title>
    <link>https://example.org/tags/how/</link>
    <description>Recent content in how on Steam - a minimal theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Sep 2018 17:42:58 +0000</lastBuildDate>
    
	<atom:link href="https://example.org/tags/how/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A plea for lean software: 6 Lessons I learned to help keep software simple</title>
      <link>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</link>
      <pubDate>Sun, 02 Sep 2018 17:42:58 +0000</pubDate>
      
      <guid>https://example.org/2018/09/02/a-plea-for-lean-software-6-lessons-i-learned-to-help-keep-software-simple/</guid>
      <description>Preface Recently, I was browsing the codebase of my company and saw that it has three versions of dashboards for an analytics page in it. I am pretty sure that customers don&amp;rsquo;t need that. This sparked something in my naive brain and I started exploring the internet for related ideas. That&amp;rsquo;s when I found this age-old paper, A Plea for Lean Software.
This post is largely influenced by ideas presented in the paper that resonated with me.</description>
    </item>
    
    <item>
      <title>Acceptance Tests: The Best Medium of Communication Between Stakeholders (if done right)</title>
      <link>https://example.org/2018/08/06/acceptance-tests-the-best-medium-of-communication-between-stakeholders-if-done-right/</link>
      <pubDate>Sun, 05 Aug 2018 18:41:18 +0000</pubDate>
      
      <guid>https://example.org/2018/08/06/acceptance-tests-the-best-medium-of-communication-between-stakeholders-if-done-right/</guid>
      <description>It&amp;rsquo;s a nice pleasant morning, and you have just entered the office. You greet your friends and grab a cup of coffee. You check your email and there is a new story assigned to you.
&amp;ldquo;As a customer, I get my usage logs backed up&amp;rdquo;
This is where is fun begins.
Communicating Requirements A product engineer&amp;rsquo;s job is to have effective and clear communication as much as it is to write code.</description>
    </item>
    
    <item>
      <title>6 Lessons On Work Ethic I Learned In One Year Of Professional Career</title>
      <link>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</link>
      <pubDate>Sat, 21 Jul 2018 18:17:06 +0000</pubDate>
      
      <guid>https://example.org/2018/07/21/6-lessons-on-work-ethic-i-learned-in-one-year-of-professional-career/</guid>
      <description>Time flies. Recently I had completed one year as a full-time employee at my current employer **Squad. **A year has passed, and I decided it was time to revisit instances, memories, and experiences and to recollect what I had learned as a professional in this past year.
It was also a wake-up call to reassess and redirect the ship named professional career to make sure it doesn&amp;rsquo;t get stuck in a whirlpool.</description>
    </item>
    
    <item>
      <title>Organization Archetypes And The Concept Of Market-Oriented &#34;Solver Teams&#34;</title>
      <link>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</link>
      <pubDate>Sat, 05 May 2018 15:56:15 +0000</pubDate>
      
      <guid>https://example.org/2018/05/05/organization-archetypes-and-the-concept-of-market-oriented-solver-teams/</guid>
      <description>Organizations which designs systems are constrained to produce designs which are copies of the communication structure of the organization.
In other words, how we organize our teams has a powerful effect on the software we produce, as well as our resulting architectural and production outcomes.
Thus, in order to get a fast flow of work from Development to Operations, with high quality, great customer outcomes and fast speed of delivery, we must organize our teams to bring the team structure to our advantage.</description>
    </item>
    
    <item>
      <title>Devops and The Principle Of Flow</title>
      <link>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</link>
      <pubDate>Sun, 29 Apr 2018 17:01:20 +0000</pubDate>
      
      <guid>https://example.org/2018/04/29/devops-and-the-principle-of-lean/</guid>
      <description>In the technology value stream, work typically flows from Development to Operations, steps consisting of functional areas between our business and our customers.
As stated in the lean principles developed by Toyota, we should optimize to get a single-piece fast and smooth flow for our releases.
We increase flow by:
 1. Making work visible, 2. Reducing batch sizes and intervals of work 3. Building in the quality, preventing defects from being passed to downstream work centers.</description>
    </item>
    
    <item>
      <title>7 Tips On Making Your Engineering Workflow Faster</title>
      <link>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</link>
      <pubDate>Sun, 22 Apr 2018 19:55:28 +0000</pubDate>
      
      <guid>https://example.org/2018/04/23/7-tips-on-making-your-engineering-workflow-faster/</guid>
      <description>One of the most important thing that I like about pair programming with other awesome engineers is you get to see their workflows. How they get things done? How they get find and make their way around tools, terminal, and editors?
After witnessing and getting awestruck by many such experiences I realized that having an effective workflow can increase your day to productivity many folds.
The next step was to take action, and while doing so, I have compiled few tips to make your engineering flow faster too.</description>
    </item>
    
    <item>
      <title>Fail Fast: Hone Your Ability to Recover and Respond Quickly</title>
      <link>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</link>
      <pubDate>Sat, 14 Apr 2018 18:16:23 +0000</pubDate>
      
      <guid>https://example.org/2018/04/14/fail-fast-hone-your-ability-to-recover-and-respond-quickly/</guid>
      <description>It&amp;rsquo;s close to midnight and you are about to wrap your day off. Suddenly you get a pager-duty to resolve a critical bug that&amp;rsquo;s failing some of the automated reporting emails.
You go on to check the logs in the log management tool. This is not the ideal time to find out that logs are not getting streamed to the log management service properly.
Next, you decide to check the performance metrics of the email API and you realize that you don&amp;rsquo;t know the new monitoring tool well enough to get the right metrics quickly.</description>
    </item>
    
    <item>
      <title>8 System Design Principles I learned After Doing It Wrong More than 50 Times!</title>
      <link>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</link>
      <pubDate>Sun, 11 Mar 2018 07:16:00 +0000</pubDate>
      
      <guid>https://example.org/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/</guid>
      <description>At Squad, we strive to build awesome products to solve customer(internal and external) needs. As a product engineer, paramount part of your job is to design and build products. Dig deep into the root cause of the problems, design solutions and implement them as the end product.
Over the course of my journey so far, here are the 8 system and product design principles that I&amp;rsquo;ve learned from other awesome people at Squad, from feedback and simply doing it not right enough multiple times.</description>
    </item>
    
    <item>
      <title>Deploying a nginx application using Kubernetes for Self-Healing and Scaling</title>
      <link>https://example.org/2017/11/19/deploying-a-nginx-application-using-kubernetes-for-self-healing-and-scaling/</link>
      <pubDate>Sun, 19 Nov 2017 15:50:50 +0000</pubDate>
      
      <guid>https://example.org/2017/11/19/deploying-a-nginx-application-using-kubernetes-for-self-healing-and-scaling/</guid>
      <description>Kubernetes is an open source system for automating deployment, scaling and management of containerized applications. A more technical term for it is, container orchestrator which is used to manage large fleets of containers.
Minikube is an all-in-one single node installation for trying out kubernetes on local machines. And the following post covers deploying a nginx application container using kubernetes in minikube.
If you don&amp;rsquo;t have, then this link has it all to install minikube and kubectl (command line tool to access minikube) : Download and install minikube and kubectl</description>
    </item>
    
    <item>
      <title>Estimation  Peril:  How To Estimate  Software Projects Effectively(or How Not To Lie)</title>
      <link>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</link>
      <pubDate>Sun, 15 Oct 2017 17:24:51 +0000</pubDate>
      
      <guid>https://example.org/2017/10/15/estimation-peril-how-to-estimate-software-projects-effectivelyor-how-not-to-lie/</guid>
      <description>Consider, you are a rockstar engineer and you are given a task by your favorite person, your project manager, to show some new fields in the dashboard.
As usual, you are asked to estimate it as soon as possible. You think that well, seems like a quickie and you are tempted to estimate it a day. But you, being burnt before, decided to look at the fields that are to be added carefully.</description>
    </item>
    
    <item>
      <title>Mastery By Robert Greene : Reading Experience</title>
      <link>https://example.org/2017/04/07/mastery-by-robert-greene-reading-experience/</link>
      <pubDate>Thu, 06 Apr 2017 20:39:38 +0000</pubDate>
      
      <guid>https://example.org/2017/04/07/mastery-by-robert-greene-reading-experience/</guid>
      <description>“The problem with all students, he said, is that they inevitably stop somewhere. They hear an idea and they hold on to it until it becomes dead; they want to flatter themselves that they know the truth. But true Zen never stops, never congeals into such truths. That is why everyone must constantly be pushed to the abyss, starting over and feeling their utter worthlessness as a student. Without suffering and doubts, the mind will come to rest on clichés and stay there, until the spirit dies as well.</description>
    </item>
    
    <item>
      <title>The Blue Ocean Strategy : How To Create Uncontested Market Space and Make the Competition Irrelevant</title>
      <link>https://example.org/2017/01/15/the-blue-ocean-strategy-how-to-create-uncontested-market-space-and-make-the-competition-irrelevant/</link>
      <pubDate>Sun, 15 Jan 2017 10:49:59 +0000</pubDate>
      
      <guid>https://example.org/2017/01/15/the-blue-ocean-strategy-how-to-create-uncontested-market-space-and-make-the-competition-irrelevant/</guid>
      <description>When Henry Ford made cheap, reliable cars people said, ‘Nah, what’s wrong with a horse?’ That was a huge bet he made, and it worked. The whole idea of _The Blue Ocean Strategy _is to create uncontested market spaces that creates new demands and make the competition irrelevant.
The book describes _Red Oceans _as known market places that have bloody competition among businesses trying to win customers. Here there is a fixed existing demand of which every company wants a share.</description>
    </item>
    
    <item>
      <title>Learning How To Learn : Course Experience</title>
      <link>https://example.org/2017/01/06/learning-how-to-learn-course-experience/</link>
      <pubDate>Thu, 05 Jan 2017 18:43:36 +0000</pubDate>
      
      <guid>https://example.org/2017/01/06/learning-how-to-learn-course-experience/</guid>
      <description>The human brain has 100 billion neurons, each neuron connected to 10 thousand other neurons. Sitting on your shoulders is the most complicated object in the known universe.
What is learning? Well basically, forming and consolidation neural patterns.
Recently I took the course “Learning How to Learn” on Coursera. I really wanted to figure out the best way to enhance my learning. And this course has been really helpful. It provides you with the right tools and tips to construct your own learning schedule.</description>
    </item>
    
    <item>
      <title>Zen and the Art of Motorcycle Maintenance : Reading Experience</title>
      <link>https://example.org/2016/12/25/zen-and-the-art-of-motorcycle-maintenance-reading-experience/</link>
      <pubDate>Sun, 25 Dec 2016 11:13:06 +0000</pubDate>
      
      <guid>https://example.org/2016/12/25/zen-and-the-art-of-motorcycle-maintenance-reading-experience/</guid>
      <description>The Japanese motorcycle maintenance guide says “ Assembly of Japanese bicycle requires great piece of mind”. There is a thing about everything you build, including bikes. If you build it with non-serene mind, then you build your problems into it.
The book takes you on a cross country bike journey that will teach you mind opening lessons that leave lasting impressions on your mind. Your mind will simple refuse to contract itself to older stage.</description>
    </item>
    
    <item>
      <title>5 notes on MVP architecture pattern for Android</title>
      <link>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</link>
      <pubDate>Mon, 19 Dec 2016 16:31:50 +0000</pubDate>
      
      <guid>https://example.org/2016/12/19/5-notes-on-mvp-architecture-pattern-for-android/</guid>
      <description>Image credits Macoscope  MVP (Model View and Presenter) is an architectural pattern inspired by the popular MVC pattern.
MVP addresses two main points :
 1. Make views as dumb as possible. The dumber the better. 2. Make each layer loosely coupled and easily testable in isolation.  I am using MVP in one of my production project and have used in some dem0 apps. Here are my 5 notes on using MVP for android.</description>
    </item>
    
    <item>
      <title>How to Win Friends and Influence People : Reading Experience and Summary</title>
      <link>https://example.org/2016/07/19/how-to-win-friends-and-influence-people-reading-experience-and-summary/</link>
      <pubDate>Mon, 18 Jul 2016 19:20:54 +0000</pubDate>
      
      <guid>https://example.org/2016/07/19/how-to-win-friends-and-influence-people-reading-experience-and-summary/</guid>
      <description>_How to win friends and influence people _is an all time classic book. I got to know about this book from the _Goodreads _recommendations and instantly decided to read this one. It starts stating that leadership is 15% technical skills and 85% skill to manage human relations. This sentence alone suffices the need of this book.
What you can get out of the book?
 * Gives you new ways to carry on meaningful conversations.</description>
    </item>
    
  </channel>
</rss>